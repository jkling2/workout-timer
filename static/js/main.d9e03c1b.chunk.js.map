{"version":3,"sources":["workout_timer/control/WorkoutTimerControl.tsx","workout_timer/page/WorkoutTimerPage.tsx","WorkoutApp.tsx","serviceWorker.ts","index.tsx"],"names":["sleep","ms","Promise","resolve","setTimeout","useWorkoutTimerControl","useState","intervalTime","breakTime","rounds","initialWorkoutTimerState","setInitialWorkoutTimerState","currentWorkoutTimerState","setCurrentWorkoutTimerState","countDown","setCountDown","audioBeforeBreak","Audio","audioBeforeInterval","playAudio","audio","play","useEffect","then","WorkoutConfiguration","props","setIntervalTime","setBreakTime","setRounds","Card","Body","Title","InputGroup","as","Col","className","Prepend","Text","Form","Control","min","max","type","step","placeholder","isInvalid","isNaN","onChange","event","parseInt","currentTarget","value","disabled","configured","Append","Row","Button","onClick","setConfigured","workoutTimerControl","WorkoutTimer","audioBeforeStart","addEventListener","ProgressBar","now","label","ButtonToolbar","aria-label","ButtonGroup","variant","size","active","WorkoutTimerPage","WorkoutApp","Navbar","bg","Brand","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d9e03c1b.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport WorkoutTimerProps from '../props/WorkoutTimerProps';\r\nimport WorkoutTimerState from '../props/WorkoutTimerState';\r\n\r\nfunction sleep(ms: number) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nfunction useWorkoutTimerControl(): WorkoutTimerProps {\r\n  const [initialWorkoutTimerState, setInitialWorkoutTimerState] = useState<WorkoutTimerState>({ intervalTime: 0, breakTime: 0, rounds: 0});\r\n  const [currentWorkoutTimerState, setCurrentWorkoutTimerState] = useState<WorkoutTimerState>(initialWorkoutTimerState);\r\n  const [countDown, setCountDown] = useState(false);\r\n  let audioBeforeBreak = new Audio(\"https://raw.githubusercontent.com/jkling2/workout-timer/master/public/sounds/beforeBreak.mp3\")\r\n  let audioBeforeInterval = new Audio(\"https://raw.githubusercontent.com/jkling2/workout-timer/master/public/sounds/beforeInterval.wav\")\r\n\r\n  const playAudio = (audio: HTMLAudioElement) => {\r\n    return audio.play();\r\n  }\r\n\r\n  useEffect(() => {\r\n    setCurrentWorkoutTimerState(initialWorkoutTimerState);\r\n  }, [initialWorkoutTimerState]);\r\n\r\n  useEffect(() => {\r\n    if (countDown && currentWorkoutTimerState.rounds > 0 && currentWorkoutTimerState.intervalTime > 0) {\r\n      sleep(1000)\r\n      .then(resolve => {\r\n        if (currentWorkoutTimerState.intervalTime === 1) {\r\n          return playAudio(audioBeforeBreak);\r\n        }\r\n      })\r\n      .then(resolve =>\r\n        setCurrentWorkoutTimerState({\r\n          intervalTime: currentWorkoutTimerState.intervalTime - 1,\r\n          breakTime: currentWorkoutTimerState.breakTime,\r\n          rounds: currentWorkoutTimerState.rounds,\r\n        }),\r\n      );\r\n    } else if (countDown && currentWorkoutTimerState.rounds > 0 && currentWorkoutTimerState.breakTime > 0) {\r\n      sleep(1000)\r\n      .then(resolve => {\r\n        if (currentWorkoutTimerState.breakTime === 1) {\r\n          return playAudio(audioBeforeInterval);\r\n        }\r\n      })\r\n      .then(resolve =>\r\n        setCurrentWorkoutTimerState({\r\n          intervalTime: currentWorkoutTimerState.intervalTime,\r\n          breakTime: currentWorkoutTimerState.breakTime - 1,\r\n          rounds: currentWorkoutTimerState.rounds,\r\n        }),\r\n      );\r\n    } else if (countDown && currentWorkoutTimerState.rounds > 0) {\r\n      sleep(1000)\r\n      .then(resolve =>\r\n        setCurrentWorkoutTimerState({\r\n          intervalTime: initialWorkoutTimerState.intervalTime,\r\n          breakTime: initialWorkoutTimerState.breakTime,\r\n          rounds: currentWorkoutTimerState.rounds - 1,\r\n        }),\r\n      );\r\n    }\r\n  }, [countDown, currentWorkoutTimerState, initialWorkoutTimerState, audioBeforeBreak, audioBeforeInterval]);\r\n\r\n  return {\r\n    initialWorkoutTimerState: initialWorkoutTimerState, \r\n    setInitialWorkoutTimerState: setInitialWorkoutTimerState,\r\n    currentWorkoutTimerState: currentWorkoutTimerState, \r\n    setCountDown: setCountDown,\r\n  };\r\n}\r\n\r\nexport default useWorkoutTimerControl;\r\n","import React, { useState } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport ProgressBar from 'react-bootstrap/ProgressBar';\r\nimport useWorkoutTimerControl from '../control/WorkoutTimerControl';\r\nimport WorkoutTimerProps from '../props/WorkoutTimerProps';\r\n\r\ninterface WorkoutConfigurationProps {\r\n  workoutTimerControl: WorkoutTimerProps;\r\n  configured: boolean;\r\n  setConfigured: Function;\r\n}\r\n\r\ninterface WorkoutProps {\r\n  workoutTimerControl: WorkoutTimerProps;\r\n}\r\n\r\nconst WorkoutConfiguration: React.FC<WorkoutConfigurationProps> = props => {\r\n  const [intervalTime, setIntervalTime] = useState(0);\r\n  const [breakTime, setBreakTime] = useState(0);\r\n  const [rounds, setRounds] = useState(0);\r\n  return (\r\n    <Card>\r\n      <Card.Body>\r\n        <Card.Title>Configuration</Card.Title>\r\n\r\n        <InputGroup as={Col} className=\"mb-3\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Interval Time</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control\r\n            min={0}\r\n            max={100}\r\n            type=\"number\"\r\n            step=\"5\"\r\n            placeholder=\"interval time in sec\"\r\n            isInvalid={isNaN(intervalTime)}\r\n            onChange={(event: React.FormEvent<HTMLInputElement>) =>\r\n              setIntervalTime(parseInt(event.currentTarget.value))\r\n            }\r\n            disabled={props.configured}\r\n          />\r\n          <InputGroup.Append>\r\n            <InputGroup.Text>sec</InputGroup.Text>\r\n          </InputGroup.Append>\r\n        </InputGroup>\r\n\r\n        <InputGroup as={Col} className=\"mb-3\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Break Time</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control\r\n            min={0}\r\n            max={100}\r\n            type=\"number\"\r\n            step=\"5\"\r\n            placeholder=\"break time in sec\"\r\n            isInvalid={isNaN(breakTime)}\r\n            onChange={(event: React.FormEvent<HTMLInputElement>) => setBreakTime(parseInt(event.currentTarget.value))}\r\n            disabled={props.configured}\r\n          />\r\n          <InputGroup.Append>\r\n            <InputGroup.Text>sec</InputGroup.Text>\r\n          </InputGroup.Append>\r\n        </InputGroup>\r\n\r\n        <InputGroup as={Col} className=\"mb-3\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text># Rounds</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control\r\n            min={0}\r\n            max={30}\r\n            type=\"number\"\r\n            step=\"1\"\r\n            placeholder=\"# rounds\"\r\n            isInvalid={isNaN(rounds)}\r\n            onChange={(event: React.FormEvent<HTMLInputElement>) => setRounds(parseInt(event.currentTarget.value))}\r\n            disabled={props.configured}\r\n          />\r\n          <InputGroup.Append>\r\n            <InputGroup.Text>Rounds</InputGroup.Text>\r\n          </InputGroup.Append>\r\n        </InputGroup>\r\n        <Row>\r\n          <Col>\r\n            <Button\r\n              onClick={() => {\r\n                props.setConfigured(true);\r\n                props.workoutTimerControl.setInitialWorkoutTimerState({\r\n                  intervalTime: intervalTime,\r\n                  breakTime: breakTime,\r\n                  rounds: rounds,\r\n                });\r\n              }}\r\n              disabled={props.configured}\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Col>\r\n          <Col>\r\n            <Button\r\n              onClick={() => {\r\n                props.setConfigured(false);\r\n                props.workoutTimerControl.setCountDown(false);\r\n              }}\r\n              disabled={!props.configured}\r\n            >\r\n              Configure\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst WorkoutTimer: React.FC<WorkoutProps> = props => {\r\n  let audioBeforeStart = new Audio(\"https://raw.githubusercontent.com/jkling2/workout-timer/master/public/sounds/beforeStart321.wav\")\r\n  audioBeforeStart.addEventListener('ended', () => props.workoutTimerControl.setCountDown(true));\r\n\r\n  const playAudio = (audio: HTMLAudioElement) => {\r\n    audio.play();\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <Card.Body>\r\n        <Card.Title>Workout</Card.Title>\r\n        <Card.Text>\r\n          {props.workoutTimerControl.initialWorkoutTimerState.intervalTime} sec PUSH - \r\n          {props.workoutTimerControl.initialWorkoutTimerState.breakTime} sec\r\n          REST - {props.workoutTimerControl.initialWorkoutTimerState.rounds} times\r\n        </Card.Text>\r\n        {props.workoutTimerControl.initialWorkoutTimerState.rounds - props.workoutTimerControl.currentWorkoutTimerState.rounds}/{props.workoutTimerControl.initialWorkoutTimerState.rounds} Rounds\r\n        <ProgressBar\r\n          now={props.workoutTimerControl.currentWorkoutTimerState.intervalTime}\r\n          label={`${props.workoutTimerControl.currentWorkoutTimerState.intervalTime}sec`}\r\n          max={props.workoutTimerControl.initialWorkoutTimerState.intervalTime}\r\n        />\r\n        <ProgressBar\r\n          now={props.workoutTimerControl.currentWorkoutTimerState.breakTime}\r\n          label={`${props.workoutTimerControl.currentWorkoutTimerState.breakTime}sec`}\r\n          max={props.workoutTimerControl.initialWorkoutTimerState.breakTime}\r\n        />\r\n        <ButtonToolbar aria-label=\"Toolbar with button groups\">\r\n          <ButtonGroup className=\"mr-2\" aria-label=\"First group\">\r\n            <Button variant=\"primary\" size=\"lg\" active onClick={() => playAudio(audioBeforeStart)}>\r\n              Start\r\n            </Button>\r\n          </ButtonGroup>\r\n          <ButtonGroup className=\"mr-2\" aria-label=\"First group\">\r\n            <Button variant=\"secondary\" active onClick={() => props.workoutTimerControl.setCountDown(false)}>\r\n              Break\r\n            </Button>\r\n          </ButtonGroup>\r\n          <ButtonGroup className=\"mr-2\" aria-label=\"First group\">\r\n            <Button variant=\"primary\" size=\"lg\" active onClick={() => props.workoutTimerControl.setCountDown(false)}>\r\n              Stop\r\n            </Button>\r\n          </ButtonGroup>\r\n        </ButtonToolbar>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst WorkoutTimerPage: React.FC = () => {\r\n  const workoutTimerControl = useWorkoutTimerControl();\r\n\r\n  const [configured, setConfigured] = useState(false);\r\n\r\n  if (configured) {\r\n    return (\r\n      <>\r\n        <WorkoutConfiguration\r\n          workoutTimerControl={workoutTimerControl}\r\n          configured={configured}\r\n          setConfigured={setConfigured}\r\n        />\r\n        <WorkoutTimer\r\n          workoutTimerControl={workoutTimerControl}\r\n        />\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <>\r\n        <WorkoutConfiguration\r\n          workoutTimerControl={workoutTimerControl}\r\n          configured={configured}\r\n          setConfigured={setConfigured}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n};\r\n\r\nexport default WorkoutTimerPage;\r\n","import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport WorkoutTimerPage from './workout_timer/page/WorkoutTimerPage';\r\n\r\nconst WorkoutApp = () => {\r\n  return (\r\n    <>\r\n      <header>\r\n        <Navbar bg=\"primary\" variant=\"dark\">\r\n          <Navbar.Brand href=\"#home\">WorkoutApp</Navbar.Brand>\r\n        </Navbar>\r\n      </header>\r\n      <main>\r\n          <WorkoutTimerPage />  \r\n      </main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WorkoutApp;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport WorkoutApp from './WorkoutApp';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<WorkoutApp />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}