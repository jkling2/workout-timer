{"version":3,"sources":["3.svg","2.svg","1.svg","favicon.svg","workout_timer/control/WorkoutTimerControl.tsx","workout_timer/display/WorkoutFinishedDisplay.tsx","workout_timer/page/WorkoutTimerPage.tsx","WorkoutApp.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","sleep","ms","Promise","resolve","setTimeout","useWorkoutTimerControl","useState","intervalTime","breakTime","rounds","initialWorkoutTimerState","setInitialWorkoutTimerState","currentWorkoutTimerState","setCurrentWorkoutTimerState","countDown","setCountDown","done","setDone","audioBeforeBreak","audioBeforeInterval","intervalAudio","Audio","useEffect","playAudio","source","src","volume","play","then","setAudio","audio","resetWorkout","WorkoutFinishedDisplay","props","Modal","show","size","centered","Header","className","Title","id","completedSuccessfull","Body","Footer","Button","hidden","onClick","quit","OverlayTrigger","trigger","placement","overlay","Tooltip","reset","WorkoutConfiguration","setIntervalTime","setBreakTime","setRounds","validRounds","setValidRounds","validIntervalTime","setValidIntervalTime","Card","InputGroup","as","Col","Prepend","Text","Form","Control","bsPrefix","type","pattern","placeholder","isInvalid","onChange","event","parseInt","currentTarget","value","disabled","configured","Append","Feedback","Row","setConfigured","workoutTimerControl","isNaN","WorkoutTimer","WorkoutState","audioIsPlaying","setAudioIsPlaying","useWindowSize","width","height","INITIAL","workoutState","setWorkoutState","audioBeforeStart","addEventListener","RUNNING","showImageModal1","setShowImageModal1","showImageModal2","setShowImageModal2","showImageModal3","setShowImageModal3","DONE","PAUSED","STOPPED","ImageModal","onShow","scrollable","alt","num3","num2","num1","run","xs","ProgressBar","animated","now","label","max","ButtonToolbar","aria-label","active","variant","WorkoutTimerPage","Container","WorkoutApp","Navbar","bg","fixed","Brand","href","logo","style","paddingTop","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,+B,mBCA3CD,EAAOC,QAAU,IAA0B,+B,mBCA3CD,EAAOC,QAAU,IAA0B,+B,mBCA3CD,EAAOC,QAAU,IAA0B,qC,6OCI3C,SAASC,EAAMC,GACb,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,MAgGrCI,MA7Ff,WAAsD,IAAD,EACaC,mBAA4B,CAAEC,aAAc,EAAGC,UAAW,EAAGC,OAAQ,IADlF,mBAC5CC,EAD4C,KAClBC,EADkB,OAEaL,mBAA4BI,GAFzC,mBAE5CE,EAF4C,KAElBC,EAFkB,OAGjBP,oBAAS,GAHQ,mBAG5CQ,EAH4C,KAGjCC,EAHiC,OAI3BT,oBAAS,GAJkB,mBAI5CU,EAJ4C,KAItCC,EAJsC,KAK/CC,EAAmB,+FACnBC,EAAsB,kGACtBC,EAAiC,IAAIC,MA2EzC,OA/DAC,qBAAU,WACRT,EAA4BH,KAC3B,CAACA,IAEJY,qBAAU,WACR,IAAMC,EAAY,SAACC,GAKjB,OAJAJ,EAAcK,IAAMD,EAChBA,IAAWL,IACbC,EAAcM,OAAS,IAElBN,EAAcO,QAEnBb,GAAaF,EAAyBH,OAAS,GAAKG,EAAyBL,aAAe,EAC9FP,EAAM,KACL4B,MAAK,SAAAzB,GACJ,GAA8C,IAA1CS,EAAyBL,aAC3B,OAAOgB,EAAUL,MAGpBU,MAAK,SAAAzB,GAAO,OACXU,EAA4B,CAC1BN,aAAcK,EAAyBL,aAAe,EACtDC,UAAWI,EAAyBJ,UACpCC,OAAQG,EAAyBH,YAG5BK,GAAaF,EAAyBH,OAAS,GAAKG,EAAyBJ,UAAY,EAClGR,EAAM,KACL4B,MAAK,SAAAzB,GACJ,GAA2C,IAAvCS,EAAyBJ,UAC3B,OAAOe,EAAUJ,MAGpBS,MAAK,SAAAzB,GAAO,OACXU,EAA4B,CAC1BN,aAAcK,EAAyBL,aACvCC,UAAWI,EAAyBJ,UAAY,EAChDC,OAAQG,EAAyBH,YAG5BK,GAAaF,EAAyBH,OAAS,EACxDT,EAAM,KACL4B,MAAK,SAAAzB,GACoC,IAApCS,EAAyBH,OAC7BI,EAA4B,CAC1BN,aAAcK,EAAyBL,aACvCC,UAAWI,EAAyBJ,UACpCC,OAAQG,EAAyBH,OAAS,IAG5CI,EAA4B,CAC1BN,aAAcG,EAAyBH,aACvCC,UAAWE,EAAyBF,UACpCC,OAAQG,EAAyBH,OAAS,OAIrCK,GAAiD,IAApCF,EAAyBH,SAC7CM,GAAa,GACbE,GAAQ,MAEX,CAACH,EAAWF,EAA0BF,EAA0BQ,EAAkBC,EAAqBC,IAEnG,CACLV,yBAA0BA,EAC1BC,4BAA6BA,EAC7BC,yBAA0BA,EAC1BG,aAAcA,EACdc,SA9Ee,SAACC,GAChBV,EAAgBU,GA8EhBC,aA3EmB,WACnBhB,GAAa,GACbE,GAAQ,GACRJ,EAA4BH,IAyE5BM,KAAMA,I,gBChDKgB,EApCgD,SAAAC,GAC7D,OACE,kBAACC,EAAA,EAAD,CAAOC,KAAMF,EAAME,KAAMC,KAAK,KAAKC,UAAQ,GACzC,kBAACH,EAAA,EAAMI,OAAP,CAAcC,UAAU,iBACtB,kBAACL,EAAA,EAAMM,MAAP,CAAaC,GAAG,iCACbR,EAAMS,qBAAuB,YAAc,kBAGhD,kBAACR,EAAA,EAAMS,KAAP,CAAYJ,UAAU,iBACpB,4BACGN,EAAMS,qBACH,wCACA,6CAGR,kBAACR,EAAA,EAAMU,OAAP,CAAcL,UAAU,iBACtB,kBAACM,EAAA,EAAD,CAAQC,OAAQb,EAAMS,qBAAsBD,GAAG,YAAYM,QAAS,kBAAMd,EAAMe,SAAhF,oBAGA,kBAACC,EAAA,EAAD,CACEC,QAAQ,QACRC,UAAU,MACVC,QAAS,kBAACC,EAAA,EAAD,CAASZ,GAAG,gBAAZ,yBAET,kBAACI,EAAA,EAAD,CACEJ,GAAG,YACHM,QAAS,kBAAM,IAAI7C,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAAS,QAAMyB,MAAK,SAAAzB,GAAO,OAAI8B,EAAMqB,aAErFrB,EAAMS,qBAAuB,QAAU,oB,qFCpB9Ca,EAA4D,SAAAtB,GAAU,IAAD,EACjC3B,oBAAU,GADuB,mBAClEC,EADkE,KACpDiD,EADoD,OAEvClD,oBAAU,GAF6B,mBAElEE,EAFkE,KAEvDiD,EAFuD,OAG7CnD,oBAAU,GAHmC,mBAGlEG,EAHkE,KAG1DiD,EAH0D,OAInCpD,oBAAS,GAJ0B,mBAIlEqD,EAJkE,KAIrDC,EAJqD,OAKvBtD,oBAAS,GALc,mBAKlEuD,EALkE,KAK/CC,EAL+C,KAMzE,OACE,kBAACC,EAAA,EAAD,CAAMtB,GAAG,WACP,kBAACsB,EAAA,EAAKpB,KAAN,KACE,kBAACoB,EAAA,EAAKvB,MAAN,CAAYC,GAAG,iBAAf,iBACA,kBAACuB,EAAA,EAAD,CAAYC,GAAIC,IAAK3B,UAAU,QAC7B,kBAACyB,EAAA,EAAWG,QAAZ,KACE,kBAACH,EAAA,EAAWI,KAAZ,uBAEF,kBAACC,EAAA,EAAKC,QAAN,CACEC,SAAS,uBACTC,KAAK,OACLC,QAAQ,SACRC,YAAY,uBACZC,WAAYd,EACZe,SAAU,SAACC,GAAD,OACRrB,EAAgBsB,SAASD,EAAME,cAAcC,SAE/CC,SAAUhD,EAAMiD,aAElB,kBAAClB,EAAA,EAAWmB,OAAZ,KACE,kBAACnB,EAAA,EAAWI,KAAZ,CAAiB3B,GAAG,kBAApB,oCAEF,kBAAC4B,EAAA,EAAKC,QAAQc,SAAd,CAAuBZ,KAAK,WAA5B,6CAC8C,sCAD9C,MAKF,kBAACR,EAAA,EAAD,CAAYC,GAAIC,IAAK3B,UAAU,QAC7B,kBAACyB,EAAA,EAAWG,QAAZ,KACE,kBAACH,EAAA,EAAWI,KAAZ,gCAEF,kBAACC,EAAA,EAAKC,QAAN,CACEC,SAAS,uBACTC,KAAK,OACLC,QAAQ,SACRC,YAAY,oBACZE,SAAU,SAACC,GAAD,OAA8CpB,EAAaqB,SAASD,EAAME,cAAcC,SAClGC,SAAUhD,EAAMiD,aAElB,kBAAClB,EAAA,EAAWmB,OAAZ,KACE,kBAACnB,EAAA,EAAWI,KAAZ,0CAIJ,kBAACJ,EAAA,EAAD,CAAYC,GAAIC,IAAK3B,UAAU,QAC7B,kBAACyB,EAAA,EAAWG,QAAZ,KACE,kBAACH,EAAA,EAAWI,KAAZ,sCAEF,kBAACC,EAAA,EAAKC,QAAN,CACEC,SAAS,uBACTC,KAAK,OACLC,QAAQ,SACRC,YAAY,WACZC,WAAYhB,EACZiB,SAAU,SAACC,GAAD,OAA8CnB,EAAUoB,SAASD,EAAME,cAAcC,SAC/FC,SAAUhD,EAAMiD,aAElB,kBAAClB,EAAA,EAAWmB,OAAZ,KACE,kBAACnB,EAAA,EAAWI,KAAZ,CAAiB3B,GAAG,kBAApB,WAEF,kBAAC4B,EAAA,EAAKC,QAAQc,SAAd,CAAuBZ,KAAK,WAA5B,wCACyC,qCADzC,MAIF,kBAACa,EAAA,EAAD,CAAK9C,UAAU,0BACb,kBAACM,EAAA,EAAD,CACEJ,GAAG,YACHF,UAAU,OACVQ,QAAS,WACHxC,EAAe,GAAKE,EAAS,GAC/BmD,GAAe,GACfE,GAAqB,GACrB7B,EAAMqD,eAAc,GACpBrD,EAAMsD,oBAAoB5E,4BAA4B,CACpDJ,aAAcA,EACdC,UAAWgF,MAAMhF,IAAc,EAAIA,EACnCC,OAAQA,KAEDF,EAAe,GACxBuD,GAAqB,GACrBF,GAAe,IACNnD,EAAS,GAClBmD,GAAe,GACfE,GAAqB,KAErBF,GAAe,GACfE,GAAqB,KAGzBmB,SAAUhD,EAAMiD,YAxBlB,UA4BA,kBAACrC,EAAA,EAAD,CACEJ,GAAG,YACHF,UAAU,OACVQ,QAAS,WACPd,EAAMqD,eAAc,GACpBrD,EAAMsD,oBAAoBxE,cAAa,IAEzCkE,UAAWhD,EAAMiD,YAPnB,iBAiBJO,EAAuC,SAAAxD,GAAU,IAIhDyD,EAJ+C,EACRpF,oBAAS,GADD,mBAC7CqF,EAD6C,KAC7BC,EAD6B,OAE1BC,MAAlBC,EAF4C,EAE5CA,MAAOC,EAFqC,EAErCA,QAFqC,SAI/CL,OAJ+C,qBAI/CA,IAJ+C,qBAI/CA,IAJ+C,mBAI/CA,IAJ+C,qBAI/CA,IAJ+C,gBAI/CA,MAJ+C,WAWZpF,mBAASoF,EAAaM,SAXV,mBAW7CC,EAX6C,KAW/BC,EAX+B,KAa9CC,EAAmB,IAAI9E,MAC3B,mGAEID,EAAgB,IAAIC,MAC1B8E,EAAiBC,iBAAiB,SAAS,WACzCR,GAAkB,GAClBM,EAAgBR,EAAaW,YAnBqB,MAsBN/F,oBAAS,GAtBH,mBAsB7CgG,EAtB6C,KAsB5BC,EAtB4B,OAuBNjG,oBAAS,GAvBH,mBAuB7CkG,EAvB6C,KAuB5BC,EAvB4B,OAwBNnG,oBAAS,GAxBH,mBAwB7CoG,EAxB6C,KAwB5BC,EAxB4B,KAsCpDrF,qBAAU,WACJW,EAAMsD,oBAAoBvE,MAC5BkF,EAAgBR,EAAakB,QAE9B,CAAC3E,EAAMsD,oBAAoBvE,KAAM0E,EAAakB,OAEjDtF,qBAAU,WACR,OAAQ2E,GACN,KAAKP,EAAaM,QAChB/D,EAAMsD,oBAAoBxD,eAC1B,MACF,KAAK2D,EAAaW,QAChBpE,EAAMsD,oBAAoBxE,cAAa,GACvC,MACF,KAAK2E,EAAamB,OAGlB,KAAKnB,EAAaoB,QAChB7E,EAAMsD,oBAAoBxE,cAAa,MAK1C,CACDkF,EACAP,EAAaM,QACbN,EAAaW,QACbX,EAAamB,OACbnB,EAAaoB,QACb7E,EAAMsD,sBAGR,IAAMwB,EAAuB,WAO3B,OAAIT,EAEA,kBAACpE,EAAA,EAAD,CAAOK,UAAU,uBAAuBJ,KAAMmE,EAAiBlE,KAAK,KAAKC,UAAQ,EAAC2E,OARlE,kBAAM,IAAI9G,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAAS,QACpEyB,MAAK,SAAAzB,GAAYoG,GAAmB,GAAQE,GAAmB,OAO2CQ,YAAY,GACjH,yBAAKC,IAAI,GAAGzF,IAAK0F,IAAMrB,MAAM,MAAMC,OAAO,SAGrCS,EAEP,kBAACtE,EAAA,EAAD,CAAOK,UAAU,uBAAuBJ,KAAMqE,EAAiBpE,KAAK,KAAKC,UAAQ,EAAC2E,OAZlE,kBAAM,IAAI9G,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAAS,QACpEyB,MAAK,SAAAzB,GAAYsG,GAAmB,GAAQE,GAAmB,OAW2CM,YAAY,GAC/G,yBAAKC,IAAI,GAAGzF,IAAK2F,IAAMtB,MAAM,MAAMC,OAAO,SAK9C,kBAAC7D,EAAA,EAAD,CAAOK,UAAU,uBAAuBJ,KAAMuE,EAAiBtE,KAAK,KAAKC,UAAQ,EAAC2E,OAhBlE,kBAAM,IAAI9G,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAAS,QACpEyB,MAAK,SAAAzB,GAAYwG,GAAmB,GAAQT,EAAgBR,EAAaW,aAeiCY,YAAY,GAC/G,yBAAKC,IAAI,GAAGzF,IAAK4F,IAAMvB,MAAM,MAAMC,OAAO,UAMpD,OACE,oCACGE,IAAiBP,EAAakB,MAC7B,kBAAC,IAAD,CAAUd,MAAOA,EAAOC,OAAQA,EAAQuB,IAAKrB,IAAiBP,EAAakB,OAE7E,kBAAC,EAAD,CACEzE,KAAM8D,IAAiBP,EAAakB,MAAQX,IAAiBP,EAAaoB,QAC1EpE,qBAAsBuD,IAAiBP,EAAakB,KACpDtD,MAAO,kBAAM4C,EAAgBR,EAAaM,UAC1ChD,KAAM,kBAAMkD,EAAgBR,EAAamB,WAE3C,kBAACE,EAAD,MACA,kBAAChD,EAAA,EAAD,CAAMtB,GAAG,WACP,kBAACsB,EAAA,EAAKpB,KAAN,KACE,kBAACoB,EAAA,EAAKvB,MAAN,CAAYC,GAAG,iBAAf,WACA,kBAACsB,EAAA,EAAKK,KAAN,CAAW7B,UAAU,kBAClBN,EAAMsD,oBAAoB7E,yBAAyBH,aADtD,kBAEG0B,EAAMsD,oBAAoB7E,yBAAyBF,UAFtD,kBAGGyB,EAAMsD,oBAAoB7E,yBAAyBD,OAHtD,UAKA,kBAACsD,EAAA,EAAKK,KAAN,CAAW7B,UAAU,kBAClBN,EAAMsD,oBAAoB7E,yBAAyBD,OAClDwB,EAAMsD,oBAAoB3E,yBAAyBH,OAFvD,IAGIwB,EAAMsD,oBAAoB7E,yBAAyBD,OAHvD,WAKA,kBAAC4E,EAAA,EAAD,CAAKkC,GAAG,IAAIhF,UAAU,kBACpB,kBAACiF,EAAA,EAAD,CACEjD,SAAS,cACTkD,UAAQ,EACRC,IAAKzF,EAAMsD,oBAAoB3E,yBAAyBL,aACxDoH,MAAK,UAAK1F,EAAMsD,oBAAoB3E,yBAAyBL,aAAxD,OACLqH,IAAK3F,EAAMsD,oBAAoB7E,yBAAyBH,gBAG3D0B,EAAMsD,oBAAoB3E,yBAAyBJ,WAAa,GAC/DyB,EAAMsD,oBAAoB3E,yBAAyBH,OAAS,GAC1D,kBAAC4E,EAAA,EAAD,CAAKkC,GAAG,IAAIhF,UAAU,kBACpB,kBAACiF,EAAA,EAAD,CACEjD,SAAS,eACTkD,UAAQ,EACRC,IAAKzF,EAAMsD,oBAAoB3E,yBAAyBJ,UACxDmH,MAAK,UAAK1F,EAAMsD,oBAAoB3E,yBAAyBJ,UAAxD,OACLoH,IAAK3F,EAAMsD,oBAAoB7E,yBAAyBF,aAIhE,kBAAC6E,EAAA,EAAD,CAAK9C,UAAU,+BACb,kBAACsF,EAAA,EAAD,CAAeC,aAAW,8BACxB,kBAACjF,EAAA,EAAD,CACEJ,GAAG,YACHF,UAAU,OACVH,KAAK,KACL2F,QAAM,EACNhF,QA7HK,WACbkD,IAAiBP,EAAaM,SAChCJ,GAAkB,GAClBW,GAAmB,GACnBJ,EAAiBxE,OACjBP,EAAcO,OACdM,EAAMsD,oBAAoB1D,SAAST,IAEnC8E,EAAgBR,EAAaW,UAsHnBpB,SACEgB,IAAiBP,EAAaW,SAC9BV,GACoE,IAApE1D,EAAMsD,oBAAoB7E,yBAAyBH,cACW,IAA9D0B,EAAMsD,oBAAoB7E,yBAAyBD,QAGpDwF,IAAiBP,EAAaM,SAAYL,EAA2B,WAAV,SAE9D,kBAAC9C,EAAA,EAAD,CACEmF,QAAQ,YACRzF,UAAU,OACVwF,QAAM,EACNhF,QAAS,kBAAMmD,EAAgBR,EAAamB,SAC5C5B,SAAUgB,IAAiBP,EAAaW,SAL1C,SASA,kBAACxD,EAAA,EAAD,CACEJ,GAAG,YACHF,UAAU,OACVH,KAAK,KACL2F,QAAM,EACNhF,QAAS,kBAAMmD,EAAgBR,EAAaoB,UAC5C7B,SAAUgB,IAAiBP,EAAaW,SAAWJ,IAAiBP,EAAamB,QANnF,cAyDCoB,EAvCoB,WACjC,IAAM1C,EAAsBlF,IADW,EAGHC,oBAAS,GAHN,mBAGhC4E,EAHgC,KAGpBI,EAHoB,KAKvC,OAAIJ,EAEA,oCACE,kBAACgD,EAAA,EAAD,KACE,kBAAC7C,EAAA,EAAD,CAAK9C,UAAU,+BACb,kBAAC,EAAD,CACEgD,oBAAqBA,EACrBL,WAAYA,EACZI,cAAeA,KAGnB,kBAACD,EAAA,EAAD,CAAK9C,UAAU,+BACb,kBAAC,EAAD,CAAcgD,oBAAqBA,OAOzC,oCACE,kBAAC2C,EAAA,EAAD,KACE,kBAAC7C,EAAA,EAAD,CAAK9C,UAAU,+BACb,kBAAC,EAAD,CACEgD,oBAAqBA,EACrBL,WAAYA,EACZI,cAAeA,Q,iBCpUd6C,G,MAzBI,WAQjB,OACE,oCACE,gCACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,KAAKL,QAAQ,OAAOM,MAAM,OACnC,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SACnB,yBAAKtB,IAAI,GAAGzF,IAAKgH,IAAM3C,MAAM,KAAKC,OAAO,KAAKxD,UAAU,uCADxD,wBAKJ,0BAAMmG,MAdgB,CACtBC,WAAY,SAaZ,KAEI,kBAAC,EAAD,UCbUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAgBC,SAASC,eAAe,SDqIlD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3H,MAAK,SAAA4H,GACjCA,EAAaC,kB","file":"static/js/main.924edd8e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/3.119c6f28.svg\";","module.exports = __webpack_public_path__ + \"static/media/2.e8953c22.svg\";","module.exports = __webpack_public_path__ + \"static/media/1.a3c5ea73.svg\";","module.exports = __webpack_public_path__ + \"static/media/favicon.8b677943.svg\";","import { useState, useEffect } from 'react';\r\nimport WorkoutTimerProps from '../props/WorkoutTimerProps';\r\nimport WorkoutTimerState from '../props/WorkoutTimerState';\r\n\r\nfunction sleep(ms: number) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nfunction useWorkoutTimerControl(): WorkoutTimerProps {\r\n  const [initialWorkoutTimerState, setInitialWorkoutTimerState] = useState<WorkoutTimerState>({ intervalTime: 0, breakTime: 0, rounds: 0});\r\n  const [currentWorkoutTimerState, setCurrentWorkoutTimerState] = useState<WorkoutTimerState>(initialWorkoutTimerState);\r\n  const [countDown, setCountDown] = useState(false);\r\n  const [done, setDone] = useState(false);\r\n  let audioBeforeBreak = \"https://raw.githubusercontent.com/jkling2/workout-timer/master/public/sounds/beforeBreak.mp3\";\r\n  let audioBeforeInterval = \"https://raw.githubusercontent.com/jkling2/workout-timer/master/public/sounds/beforeInterval.wav\";\r\n  let intervalAudio:HTMLAudioElement = new Audio();\r\n\r\n  const setAudio = (audio: HTMLAudioElement) => {\r\n    intervalAudio = audio;\r\n  }\r\n  \r\n  const resetWorkout = () => {\r\n    setCountDown(false);\r\n    setDone(false);\r\n    setCurrentWorkoutTimerState(initialWorkoutTimerState);\r\n  }\r\n  \r\n  useEffect(() => {\r\n    setCurrentWorkoutTimerState(initialWorkoutTimerState);\r\n  }, [initialWorkoutTimerState]);\r\n  \r\n  useEffect(() => {\r\n    const playAudio = (source: string) => {\r\n      intervalAudio.src = source;\r\n      if (source === audioBeforeInterval) {\r\n        intervalAudio.volume = 0.5;\r\n      }\r\n      return intervalAudio.play();\r\n    }\r\n    if (countDown && currentWorkoutTimerState.rounds > 0 && currentWorkoutTimerState.intervalTime > 0) {\r\n      sleep(1000)\r\n      .then(resolve => {\r\n        if (currentWorkoutTimerState.intervalTime === 1) {\r\n          return playAudio(audioBeforeBreak);\r\n        }\r\n      })\r\n      .then(resolve =>\r\n        setCurrentWorkoutTimerState({\r\n          intervalTime: currentWorkoutTimerState.intervalTime - 1,\r\n          breakTime: currentWorkoutTimerState.breakTime,\r\n          rounds: currentWorkoutTimerState.rounds,\r\n        }),\r\n      );\r\n    } else if (countDown && currentWorkoutTimerState.rounds > 1 && currentWorkoutTimerState.breakTime > 0) {\r\n      sleep(1000)\r\n      .then(resolve => {\r\n        if (currentWorkoutTimerState.breakTime === 1) {\r\n          return playAudio(audioBeforeInterval);\r\n        }\r\n      })\r\n      .then(resolve =>\r\n        setCurrentWorkoutTimerState({\r\n          intervalTime: currentWorkoutTimerState.intervalTime,\r\n          breakTime: currentWorkoutTimerState.breakTime - 1,\r\n          rounds: currentWorkoutTimerState.rounds,\r\n        }),\r\n      );\r\n    } else if (countDown && currentWorkoutTimerState.rounds > 0) {\r\n      sleep(1000)\r\n      .then(resolve => {\r\n        if (currentWorkoutTimerState.rounds === 1) {\r\n        setCurrentWorkoutTimerState({\r\n          intervalTime: currentWorkoutTimerState.intervalTime,\r\n          breakTime: currentWorkoutTimerState.breakTime,\r\n          rounds: currentWorkoutTimerState.rounds - 1,\r\n        });\r\n      } else {\r\n        setCurrentWorkoutTimerState({\r\n          intervalTime: initialWorkoutTimerState.intervalTime,\r\n          breakTime: initialWorkoutTimerState.breakTime,\r\n          rounds: currentWorkoutTimerState.rounds - 1,\r\n        });\r\n      }\r\n    });\r\n    } else if (countDown && currentWorkoutTimerState.rounds === 0) {\r\n        setCountDown(false);\r\n        setDone(true);\r\n    }\r\n  }, [countDown, currentWorkoutTimerState, initialWorkoutTimerState, audioBeforeBreak, audioBeforeInterval, intervalAudio]);\r\n\r\n  return {\r\n    initialWorkoutTimerState: initialWorkoutTimerState, \r\n    setInitialWorkoutTimerState: setInitialWorkoutTimerState,\r\n    currentWorkoutTimerState: currentWorkoutTimerState, \r\n    setCountDown: setCountDown,\r\n    setAudio: setAudio,\r\n    resetWorkout: resetWorkout,\r\n    done: done,\r\n  };\r\n}\r\n\r\nexport default useWorkoutTimerControl;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\n\r\ninterface WorkoutFinishedProps {\r\n  show: boolean;\r\n  completedSuccessfull: boolean;\r\n  reset: Function;\r\n  quit: Function;\r\n}\r\n\r\nconst WorkoutFinishedDisplay: React.FC<WorkoutFinishedProps> = props => {\r\n  return (\r\n    <Modal show={props.show} size=\"lg\" centered >\r\n      <Modal.Header className=\"modal-head-fg\">\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          {props.completedSuccessfull ? 'WUHUUUUU!' : 'Stop Workout?'}\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body className=\"modal-rest-fg\">\r\n        <h5>\r\n          {props.completedSuccessfull\r\n            ? 'You completed your Workout! Congrats!'\r\n            : 'Do you really want to stop your Workout?'}\r\n        </h5>\r\n      </Modal.Body>\r\n      <Modal.Footer className=\"modal-rest-fg\">\r\n        <Button hidden={props.completedSuccessfull} id=\"button-fg\" onClick={() => props.quit()}>\r\n          Continue Workout\r\n        </Button>\r\n        <OverlayTrigger\r\n          trigger=\"click\"\r\n          placement=\"top\"\r\n          overlay={<Tooltip id=\"resetTooltip\">Reseting the Workout</Tooltip>}\r\n          >\r\n          <Button\r\n            id=\"button-fg\"\r\n            onClick={() => new Promise(resolve => setTimeout(resolve, 500)).then(resolve => props.reset())}\r\n            >\r\n            {props.completedSuccessfull ? 'Close' : 'Stop Workout'}\r\n          </Button>\r\n        </OverlayTrigger>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default WorkoutFinishedDisplay;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Button, ButtonToolbar, Card, Col, Container, Form, InputGroup, Modal, ProgressBar, Row } from 'react-bootstrap';\r\nimport useWorkoutTimerControl from '../control/WorkoutTimerControl';\r\nimport WorkoutTimerProps from '../props/WorkoutTimerProps';\r\nimport WorkoutFinishedDisplay from '../display/WorkoutFinishedDisplay';\r\nimport num3 from '../../3.svg';\r\nimport num2 from '../../2.svg';\r\nimport num1 from '../../1.svg';\r\nimport Confetti from 'react-confetti';\r\nimport useWindowSize from 'react-use/lib/useWindowSize'\r\n\r\ninterface WorkoutConfigurationProps {\r\n  workoutTimerControl: WorkoutTimerProps;\r\n  configured: boolean;\r\n  setConfigured: Function;\r\n}\r\n\r\ninterface WorkoutProps {\r\n  workoutTimerControl: WorkoutTimerProps;\r\n}\r\n\r\nconst WorkoutConfiguration: React.FC<WorkoutConfigurationProps> = props => {\r\n  const [intervalTime, setIntervalTime] = useState(-1);\r\n  const [breakTime, setBreakTime] = useState(-1);\r\n  const [rounds, setRounds] = useState(-1);\r\n  const [validRounds, setValidRounds] = useState(true);\r\n  const [validIntervalTime, setValidIntervalTime] = useState(true);\r\n  return (\r\n    <Card id=\"card-fg\">\r\n      <Card.Body>\r\n        <Card.Title id=\"card-title-fg\">Configuration</Card.Title>\r\n        <InputGroup as={Col} className=\"mb-3\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Interval Time</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control\r\n            bsPrefix=\"form-control form-fg\"\r\n            type=\"text\"\r\n            pattern=\"[0-9]*\"\r\n            placeholder=\"interval time in sec\"\r\n            isInvalid={!validIntervalTime}\r\n            onChange={(event: React.FormEvent<HTMLInputElement>) =>\r\n              setIntervalTime(parseInt(event.currentTarget.value))\r\n            }\r\n            disabled={props.configured}\r\n          />\r\n          <InputGroup.Append>\r\n            <InputGroup.Text id=\"prepend-radius\">sec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</InputGroup.Text>\r\n          </InputGroup.Append>\r\n          <Form.Control.Feedback type=\"invalid\">\r\n              Please set a numerical Interval Time e.g. <strong>20</strong>.\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n\r\n        <InputGroup as={Col} className=\"mb-3\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>&nbsp;&nbsp;&nbsp;Break Time</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control\r\n            bsPrefix=\"form-control form-fg\"\r\n            type=\"text\"\r\n            pattern=\"[0-9]*\"\r\n            placeholder=\"break time in sec\"\r\n            onChange={(event: React.FormEvent<HTMLInputElement>) => setBreakTime(parseInt(event.currentTarget.value))}\r\n            disabled={props.configured}\r\n          />\r\n          <InputGroup.Append>\r\n            <InputGroup.Text>sec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</InputGroup.Text>\r\n          </InputGroup.Append>\r\n        </InputGroup>\r\n\r\n        <InputGroup as={Col} className=\"mb-3\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Rounds</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control\r\n            bsPrefix=\"form-control form-fg\"\r\n            type=\"text\"\r\n            pattern=\"[0-9]*\"\r\n            placeholder=\"# rounds\"\r\n            isInvalid={!validRounds}\r\n            onChange={(event: React.FormEvent<HTMLInputElement>) => setRounds(parseInt(event.currentTarget.value))}\r\n            disabled={props.configured}\r\n          />\r\n          <InputGroup.Append>\r\n            <InputGroup.Text id=\"prepend-radius\">Rounds</InputGroup.Text>\r\n          </InputGroup.Append>\r\n          <Form.Control.Feedback type=\"invalid\">\r\n              Please set a numerical # Rounds e.g. <strong>1</strong>.\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n        <Row className=\"justify-content-center\">\r\n          <Button\r\n            id=\"button-fg\"\r\n            className=\"mr-2\"\r\n            onClick={() => {\r\n              if (intervalTime > 0 && rounds > 0) {\r\n                setValidRounds(true);\r\n                setValidIntervalTime(true);\r\n                props.setConfigured(true);\r\n                props.workoutTimerControl.setInitialWorkoutTimerState({\r\n                  intervalTime: intervalTime,\r\n                  breakTime: isNaN(breakTime) ? -1 : breakTime,\r\n                  rounds: rounds,\r\n                });\r\n              } else if (intervalTime > 0) {\r\n                setValidIntervalTime(true);\r\n                setValidRounds(false);\r\n              } else if (rounds > 0) {\r\n                setValidRounds(true);\r\n                setValidIntervalTime(false);\r\n              } else {\r\n                setValidRounds(false);\r\n                setValidIntervalTime(false);\r\n              }\r\n            }}\r\n            disabled={props.configured}\r\n          >\r\n            Submit\r\n          </Button>\r\n          <Button\r\n            id=\"button-fg\"\r\n            className=\"ml-2\"\r\n            onClick={() => {\r\n              props.setConfigured(false);\r\n              props.workoutTimerControl.setCountDown(false);\r\n            }}\r\n            disabled={!props.configured}\r\n          >\r\n            Configure\r\n          </Button>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst WorkoutTimer: React.FC<WorkoutProps> = props => {\r\n  const [audioIsPlaying, setAudioIsPlaying] = useState(false);\r\n  const { width, height } = useWindowSize()\r\n  \r\n  enum WorkoutState {\r\n    INITIAL,\r\n    RUNNING,\r\n    PAUSED,\r\n    STOPPED,\r\n    DONE,\r\n  }\r\n  const [workoutState, setWorkoutState] = useState(WorkoutState.INITIAL);\r\n  \r\n  const audioBeforeStart = new Audio(\r\n    'https://raw.githubusercontent.com/jkling2/workout-timer/master/public/sounds/beforeStart321.wav',\r\n  );\r\n  const intervalAudio = new Audio();\r\n  audioBeforeStart.addEventListener('ended', () => {\r\n    setAudioIsPlaying(false);\r\n    setWorkoutState(WorkoutState.RUNNING);\r\n  });\r\n\r\n  const [showImageModal1, setShowImageModal1] = useState(false);\r\n  const [showImageModal2, setShowImageModal2] = useState(false);\r\n  const [showImageModal3, setShowImageModal3] = useState(false);\r\n\r\n  const runWorkout = () => {\r\n    if (workoutState === WorkoutState.INITIAL) {\r\n      setAudioIsPlaying(true);\r\n      setShowImageModal1(true);\r\n      audioBeforeStart.play();\r\n      intervalAudio.play();\r\n      props.workoutTimerControl.setAudio(intervalAudio);\r\n    } else {\r\n      setWorkoutState(WorkoutState.RUNNING);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.workoutTimerControl.done) {\r\n      setWorkoutState(WorkoutState.DONE);\r\n    }\r\n  }, [props.workoutTimerControl.done, WorkoutState.DONE]);\r\n\r\n  useEffect(() => {\r\n    switch (workoutState) {\r\n      case WorkoutState.INITIAL:\r\n        props.workoutTimerControl.resetWorkout();\r\n        break;\r\n      case WorkoutState.RUNNING:\r\n        props.workoutTimerControl.setCountDown(true);\r\n        break;\r\n      case WorkoutState.PAUSED:\r\n        props.workoutTimerControl.setCountDown(false);\r\n        break;\r\n      case WorkoutState.STOPPED:\r\n        props.workoutTimerControl.setCountDown(false);\r\n        break;\r\n      default:\r\n      // code block\r\n    }\r\n  }, [\r\n    workoutState,\r\n    WorkoutState.INITIAL,\r\n    WorkoutState.RUNNING,\r\n    WorkoutState.PAUSED,\r\n    WorkoutState.STOPPED,\r\n    props.workoutTimerControl,\r\n  ]);\r\n\r\n  const ImageModal: React.FC = () => {\r\n    const startTimer1 = () => new Promise(resolve => setTimeout(resolve, 1000))\r\n    .then(resolve => {setShowImageModal1(false); setShowImageModal2(true);});\r\n    const startTimer2 = () => new Promise(resolve => setTimeout(resolve, 1000))\r\n    .then(resolve => {setShowImageModal2(false); setShowImageModal3(true);});\r\n    const startTimer3 = () => new Promise(resolve => setTimeout(resolve, 1000))\r\n    .then(resolve => {setShowImageModal3(false); setWorkoutState(WorkoutState.RUNNING);});\r\n    if (showImageModal1) {\r\n      return (\r\n        <Modal className=\"fade_in_number_modal\" show={showImageModal1} size=\"sm\" centered onShow={startTimer1} scrollable={false} >\r\n          <img alt=\"\" src={num3} width=\"80%\" height=\"80%\" />\r\n        </Modal>\r\n      );\r\n    } else if (showImageModal2) {\r\n      return (\r\n        <Modal className=\"fade_in_number_modal\" show={showImageModal2} size=\"sm\" centered onShow={startTimer2} scrollable={false} >\r\n            <img alt=\"\" src={num2} width=\"80%\" height=\"80%\" />\r\n        </Modal>\r\n      );\r\n    } else {\r\n      return (\r\n        <Modal className=\"fade_in_number_modal\" show={showImageModal3} size=\"sm\" centered onShow={startTimer3} scrollable={false} >\r\n            <img alt=\"\" src={num1} width=\"80%\" height=\"80%\" />\r\n        </Modal>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {workoutState === WorkoutState.DONE && (\r\n        <Confetti width={width} height={height} run={workoutState === WorkoutState.DONE} />\r\n      )}\r\n      <WorkoutFinishedDisplay\r\n        show={workoutState === WorkoutState.DONE || workoutState === WorkoutState.STOPPED}\r\n        completedSuccessfull={workoutState === WorkoutState.DONE}\r\n        reset={() => setWorkoutState(WorkoutState.INITIAL)}\r\n        quit={() => setWorkoutState(WorkoutState.PAUSED)}\r\n      />\r\n      <ImageModal />\r\n      <Card id=\"card-fg\">\r\n        <Card.Body>\r\n          <Card.Title id=\"card-title-fg\">Workout</Card.Title>\r\n          <Card.Text className=\"mt-3 ml-3 mr-3\">\r\n            {props.workoutTimerControl.initialWorkoutTimerState.intervalTime} sec PUSH -&nbsp;\r\n            {props.workoutTimerControl.initialWorkoutTimerState.breakTime} sec REST -&nbsp;\r\n            {props.workoutTimerControl.initialWorkoutTimerState.rounds} times\r\n          </Card.Text>\r\n          <Card.Text className=\"mt-3 ml-3 mr-3\">\r\n            {props.workoutTimerControl.initialWorkoutTimerState.rounds -\r\n              props.workoutTimerControl.currentWorkoutTimerState.rounds}\r\n            /{props.workoutTimerControl.initialWorkoutTimerState.rounds} Rounds\r\n          </Card.Text>\r\n          <Row xs=\"1\" className=\"mt-3 ml-3 mr-3\">\r\n            <ProgressBar\r\n              bsPrefix=\"fg-progress\"\r\n              animated\r\n              now={props.workoutTimerControl.currentWorkoutTimerState.intervalTime}\r\n              label={`${props.workoutTimerControl.currentWorkoutTimerState.intervalTime}sec`}\r\n              max={props.workoutTimerControl.initialWorkoutTimerState.intervalTime}\r\n            />\r\n          </Row>\r\n          {props.workoutTimerControl.currentWorkoutTimerState.breakTime >= 0 &&\r\n            props.workoutTimerControl.currentWorkoutTimerState.rounds > 1 && (\r\n              <Row xs=\"1\" className=\"mt-3 ml-3 mr-3\">\r\n                <ProgressBar\r\n                  bsPrefix=\"fgl-progress\"\r\n                  animated\r\n                  now={props.workoutTimerControl.currentWorkoutTimerState.breakTime}\r\n                  label={`${props.workoutTimerControl.currentWorkoutTimerState.breakTime}sec`}\r\n                  max={props.workoutTimerControl.initialWorkoutTimerState.breakTime}\r\n                />\r\n              </Row>\r\n            )}\r\n          <Row className=\"mt-3 justify-content-center\">\r\n            <ButtonToolbar aria-label=\"Toolbar with button groups\">\r\n              <Button\r\n                id=\"button-fg\"\r\n                className=\"mr-2\"\r\n                size=\"lg\"\r\n                active\r\n                onClick={runWorkout}\r\n                disabled={\r\n                  workoutState === WorkoutState.RUNNING ||\r\n                  audioIsPlaying ||\r\n                  props.workoutTimerControl.initialWorkoutTimerState.intervalTime === 0 ||\r\n                  props.workoutTimerControl.initialWorkoutTimerState.rounds === 0\r\n                }\r\n              >\r\n                {workoutState === WorkoutState.INITIAL && !audioIsPlaying ? 'Start' : 'Continue'}\r\n              </Button>\r\n              <Button\r\n                variant=\"secondary\"\r\n                className=\"mr-2\"\r\n                active\r\n                onClick={() => setWorkoutState(WorkoutState.PAUSED)}\r\n                disabled={workoutState !== WorkoutState.RUNNING}\r\n              >\r\n                Break\r\n              </Button>\r\n              <Button\r\n                id=\"button-fg\"\r\n                className=\"mr-2\"\r\n                size=\"lg\"\r\n                active\r\n                onClick={() => setWorkoutState(WorkoutState.STOPPED)}\r\n                disabled={workoutState !== WorkoutState.RUNNING && workoutState !== WorkoutState.PAUSED}\r\n              >\r\n                Stop\r\n              </Button>\r\n            </ButtonToolbar>\r\n          </Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nconst WorkoutTimerPage: React.FC = () => {\r\n  const workoutTimerControl = useWorkoutTimerControl();\r\n\r\n  const [configured, setConfigured] = useState(false);\r\n\r\n  if (configured) {\r\n    return (\r\n      <>\r\n        <Container>\r\n          <Row className=\"mt-3 justify-content-center\">\r\n            <WorkoutConfiguration\r\n              workoutTimerControl={workoutTimerControl}\r\n              configured={configured}\r\n              setConfigured={setConfigured}\r\n            />\r\n          </Row>\r\n          <Row className=\"mt-3 justify-content-center\">\r\n            <WorkoutTimer workoutTimerControl={workoutTimerControl} />\r\n          </Row>\r\n        </Container>\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <>\r\n        <Container>\r\n          <Row className=\"mt-3 justify-content-center\">\r\n            <WorkoutConfiguration\r\n              workoutTimerControl={workoutTimerControl}\r\n              configured={configured}\r\n              setConfigured={setConfigured}\r\n            />\r\n          </Row>\r\n        </Container>\r\n      </>\r\n    );\r\n  }\r\n};\r\n\r\nexport default WorkoutTimerPage;\r\n","import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport WorkoutTimerPage from './workout_timer/page/WorkoutTimerPage';\r\nimport logo from './favicon.svg';\r\nimport './WorkoutApp.css'\r\n\r\nconst WorkoutApp = () => {\r\n\r\n  const styles = {\r\n    padTopAfterFixedNavbar: {\r\n      paddingTop: \"50px\",\r\n    } as React.CSSProperties,\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <header>\r\n        <Navbar bg=\"fg\" variant=\"dark\" fixed=\"top\">\r\n          <Navbar.Brand href=\"#home\">\r\n          <img alt=\"\" src={logo} width=\"30\" height=\"30\" className=\"spin-logo d-inline-block align-top\" />&nbsp;&nbsp;WorkoutApp\r\n          </Navbar.Brand>\r\n        </Navbar>\r\n      </header>\r\n      <main style={styles.padTopAfterFixedNavbar}>\r\n      {/*<main style={{paddingTop: \"50px\"}}> */}  {/*this works too - Inline-Style*/}\r\n          <WorkoutTimerPage />  \r\n      </main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WorkoutApp;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport WorkoutApp from './WorkoutApp';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<WorkoutApp />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}