{"version":3,"sources":["workout_timer/context/WorkoutTimerContext.tsx","workout_timer/control/WorkoutTimerControl.tsx","workout_timer/display/WorkoutTimerDisplay.tsx","workout_timer/display/WorkoutConfigurationDisplay.tsx","workout_timer/display/WorkoutFinishedDisplay.tsx","workout_timer/display/WorkoutStartDisplay.tsx","workout_timer/page/WorkoutTimerPage.tsx","WorkoutApp.tsx","serviceWorker.ts","index.tsx","img/3.svg","img/2.svg","img/1.svg","img/favicon.svg","sounds/beforeBreak.mp3","sounds/beforeInterval.wav","sounds/beforeStart321.wav"],"names":["WorkoutTimerContext","React","createContext","configured","initialWorkoutTimerState","intervalTime","breakTime","rounds","currentWorkoutTimerState","setConfigured","setInitialWorkoutTimerState","workoutTimerState","setCurrentWorkoutTimerState","WorkoutTimerContextProvider","props","history","useHistory","location","useLocation","initialValues","search","searchParams","URLSearchParams","get","parseInt","getInitialValues","useState","useEffect","set","push","toString","Provider","value","children","useWorkoutTimerControl","WorkoutState","useContext","countDown","setCountDown","done","setDone","audioBeforeBreakSource","require","audioBeforeIntervalSource","audioBeforeBreak","Audio","audioBeforeInterval","setTimeout","src","volume","play","initializePlayAudio","resetWorkout","WorkoutConfiguration","setIntervalTime","setBreakTime","setRounds","validRounds","setValidRounds","validIntervalTime","setValidIntervalTime","Card","id","Body","Title","InputGroup","as","Col","className","Prepend","Text","Form","Control","bsPrefix","type","pattern","placeholder","isInvalid","onChange","event","isNaN","currentTarget","length","disabled","Append","Feedback","Row","Button","onClick","newInitialWorkoutTimerState","WorkoutFinishedDisplay","Modal","show","size","centered","Header","completedSuccessfull","Footer","hidden","quit","OverlayTrigger","trigger","placement","overlay","Tooltip","Promise","resolve","then","reset","WorkoutStartDisplay","showImageModal3","setShowImageModal3","showImageModal2","setShowImageModal2","showImageModal1","setShowImageModal1","start","onShow","scrollable","alt","num3","width","height","num2","num1","WorkoutTimer","useWindowSize","audioIsPlaying","setAudioIsPlaying","initialState","INITIAL","PAUSED","workoutState","setWorkoutState","audioBeforeStart","addEventListener","RUNNING","workoutTimerControl","DONE","STOPPED","run","Math","max","xs","ProgressBar","animated","now","label","ButtonToolbar","aria-label","active","variant","WorkoutTimerPage","Container","WorkoutApp","Navbar","bg","fixed","Brand","href","logo","style","paddingTop","Boolean","window","hostname","match","mount","document","getElementById","app","StrictMode","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.95b5e766.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport WorkoutTimerState from '../props/WorkoutTimerState';\r\n\r\nexport const WorkoutTimerContext = React.createContext({\r\n  configured: false,\r\n  initialWorkoutTimerState: { intervalTime: -1, breakTime: -1, rounds: -1 },\r\n  currentWorkoutTimerState: { intervalTime: -1, breakTime: -1, rounds: -1 },\r\n  setConfigured: (configured: boolean) => {},\r\n  setInitialWorkoutTimerState: (workoutTimerState: WorkoutTimerState) => {},\r\n  setCurrentWorkoutTimerState: (workoutTimerState: WorkoutTimerState) => {},\r\n});\r\n\r\nfunction getInitialValues(search: string): [boolean, WorkoutTimerState, WorkoutTimerState] {\r\n  const searchParams = new URLSearchParams(search);\r\n  const configured = searchParams.get('configured') === \"true\" ? true : false;\r\n  const initialWorkoutTimerState: WorkoutTimerState = {\r\n    intervalTime: parseInt(searchParams.get('interval') || '-1') || -1,\r\n    breakTime: parseInt(searchParams.get('break') || '-1') || -1,\r\n    rounds: parseInt(searchParams.get('rounds') || '-1') || -1,\r\n  };\r\n  const currentWorkoutTimerState: WorkoutTimerState = {\r\n    intervalTime: parseInt(searchParams.get('currentInterval') || '0') || 0,\r\n    breakTime: parseInt(searchParams.get('currentBreak') || '0') || 0,\r\n    rounds: parseInt(searchParams.get('currentRounds') || '0') || 0,\r\n  };\r\n  return [configured, initialWorkoutTimerState, currentWorkoutTimerState];\r\n}\r\n\r\nexport const WorkoutTimerContextProvider: React.FC = props => {\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  const initialValues: [boolean, WorkoutTimerState, WorkoutTimerState] = (() => getInitialValues(location.search))();\r\n\r\n  const [configured, setConfigured] = useState<boolean>(initialValues[0]);\r\n  const [initialWorkoutTimerState, setInitialWorkoutTimerState] = useState<WorkoutTimerState>(initialValues[1]);\r\n  const [currentWorkoutTimerState, setCurrentWorkoutTimerState] = useState<WorkoutTimerState>(initialValues[2]);\r\n\r\n  useEffect(() => {\r\n    const searchParams = new URLSearchParams(location.search);\r\n\r\n    searchParams.set('configured', `${configured}`);\r\n    searchParams.set('interval', `${initialWorkoutTimerState.intervalTime}`);\r\n    searchParams.set('break', `${initialWorkoutTimerState.breakTime}`);\r\n    searchParams.set('rounds', `${initialWorkoutTimerState.rounds}`);\r\n    searchParams.set('currentInterval', `${currentWorkoutTimerState.intervalTime}`);\r\n    searchParams.set('currentBreak', `${currentWorkoutTimerState.breakTime}`);\r\n    searchParams.set('currentRounds', `${currentWorkoutTimerState.rounds}`);\r\n\r\n    history.push(`?${searchParams.toString()}`);\r\n  }, [configured, initialWorkoutTimerState, currentWorkoutTimerState, history, location.search]);\r\n\r\n  return (\r\n    <WorkoutTimerContext.Provider\r\n      value={{\r\n        configured: configured,\r\n        initialWorkoutTimerState: initialWorkoutTimerState,\r\n        currentWorkoutTimerState: currentWorkoutTimerState,\r\n        setConfigured: setConfigured,\r\n        setInitialWorkoutTimerState: setInitialWorkoutTimerState,\r\n        setCurrentWorkoutTimerState: setCurrentWorkoutTimerState,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </WorkoutTimerContext.Provider>\r\n  );\r\n};\r\n","import { useState, useEffect, useContext } from 'react';\r\nimport WorkoutTimerProps from '../props/WorkoutTimerProps';\r\nimport { WorkoutTimerContext } from '../context/WorkoutTimerContext';\r\n\r\nfunction useWorkoutTimerControl(): WorkoutTimerProps {\r\n  const { initialWorkoutTimerState, currentWorkoutTimerState, setCurrentWorkoutTimerState } = useContext(\r\n    WorkoutTimerContext,\r\n  );\r\n  const [countDown, setCountDown] = useState(false);\r\n  const [done, setDone] = useState(false);\r\n  const audioBeforeBreakSource: string = require('../../sounds/beforeBreak.mp3');\r\n  const audioBeforeIntervalSource: string = require('../../sounds/beforeInterval.wav');\r\n  const audioBeforeBreak: HTMLAudioElement = new Audio();\r\n  const audioBeforeInterval: HTMLAudioElement = new Audio();\r\n\r\n  const initializePlayAudio = () => {\r\n    audioBeforeBreak.play();\r\n    audioBeforeInterval.play();\r\n  };\r\n\r\n  const resetWorkout = () => {\r\n    setCountDown(false);\r\n    setDone(false);\r\n    setCurrentWorkoutTimerState(initialWorkoutTimerState);\r\n  };\r\n  \r\n  useEffect(() => {\r\n    const tick = () => {\r\n      if (countDown) {\r\n        if (currentWorkoutTimerState.rounds > 0 && currentWorkoutTimerState.intervalTime > 0) {\r\n          if (currentWorkoutTimerState.intervalTime === 1) {\r\n            audioBeforeBreak.src = audioBeforeBreakSource;\r\n            audioBeforeBreak.volume = 0.5;\r\n            audioBeforeBreak.play();\r\n          }\r\n          setCurrentWorkoutTimerState({\r\n            intervalTime: currentWorkoutTimerState.intervalTime - 1,\r\n            breakTime: currentWorkoutTimerState.breakTime,\r\n            rounds: currentWorkoutTimerState.rounds,\r\n          });\r\n        } else if (currentWorkoutTimerState.rounds > 1 && currentWorkoutTimerState.breakTime > 0) {\r\n          if (currentWorkoutTimerState.breakTime === 1) {\r\n            audioBeforeInterval.src = audioBeforeIntervalSource;\r\n            audioBeforeInterval.play();\r\n          }\r\n          setCurrentWorkoutTimerState({\r\n            intervalTime: currentWorkoutTimerState.intervalTime,\r\n            breakTime: currentWorkoutTimerState.breakTime - 1,\r\n            rounds: currentWorkoutTimerState.rounds,\r\n          });\r\n        } else if (currentWorkoutTimerState.rounds > 0) {\r\n          if (currentWorkoutTimerState.rounds === 1) {\r\n            setCurrentWorkoutTimerState({\r\n              intervalTime: currentWorkoutTimerState.intervalTime,\r\n              breakTime: currentWorkoutTimerState.breakTime,\r\n              rounds: currentWorkoutTimerState.rounds - 1,\r\n            });\r\n          } else {\r\n            setCurrentWorkoutTimerState({\r\n              intervalTime: initialWorkoutTimerState.intervalTime,\r\n              breakTime: initialWorkoutTimerState.breakTime,\r\n              rounds: currentWorkoutTimerState.rounds - 1,\r\n            });\r\n          }\r\n        }\r\n      }\r\n    };\r\n    if (countDown && currentWorkoutTimerState.rounds === 0) {\r\n      setCountDown(false);\r\n      setDone(true);\r\n    } else {\r\n      setTimeout(tick, 1000);\r\n    }\r\n  }, [\r\n    countDown,\r\n    currentWorkoutTimerState,\r\n    initialWorkoutTimerState,\r\n    // audioBeforeBreak,\r\n    // audioBeforeInterval,\r\n    setCurrentWorkoutTimerState,\r\n  ]);\r\n\r\n  return {\r\n    setCountDown: setCountDown,\r\n    initializePlayAudio: initializePlayAudio,\r\n    resetWorkout: resetWorkout,\r\n    done: done,\r\n  };\r\n}\r\n\r\nexport default useWorkoutTimerControl;\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport useWindowSize from 'react-use/lib/useWindowSize';\r\nimport { Card, Row, ProgressBar, ButtonToolbar, Button } from 'react-bootstrap';\r\nimport Confetti from 'react-confetti';\r\nimport WorkoutTimerProps from '../props/WorkoutTimerProps';\r\nimport WorkoutFinishedDisplay from './WorkoutFinishedDisplay';\r\nimport WorkoutStartDisplay from './WorkoutStartDisplay';\r\nimport { WorkoutTimerContext } from '../context/WorkoutTimerContext';\r\n\r\nenum WorkoutState {\r\n  INITIAL,\r\n  RUNNING,\r\n  PAUSED,\r\n  STOPPED,\r\n  DONE,\r\n}\r\n\r\nconst WorkoutTimer: React.FC<{ workoutTimerControl: WorkoutTimerProps }> = props => {\r\n  const { width, height } = useWindowSize();\r\n  const [audioIsPlaying, setAudioIsPlaying] = useState(false);\r\n  const { initialWorkoutTimerState, currentWorkoutTimerState } = useContext(WorkoutTimerContext);\r\n\r\n  const initialState =\r\n    currentWorkoutTimerState.intervalTime === initialWorkoutTimerState.intervalTime &&\r\n    currentWorkoutTimerState.breakTime === initialWorkoutTimerState.breakTime &&\r\n    currentWorkoutTimerState.rounds === initialWorkoutTimerState.rounds\r\n      ? WorkoutState.INITIAL\r\n      : WorkoutState.PAUSED;\r\n  const [workoutState, setWorkoutState] = useState(initialState);\r\n\r\n  const audioBeforeStart = new Audio(require('../../sounds/beforeStart321.wav'));\r\n  audioBeforeStart.addEventListener('ended', () => {\r\n    setAudioIsPlaying(false);\r\n    setWorkoutState(WorkoutState.RUNNING);\r\n  });\r\n  audioBeforeStart.addEventListener('playing', () => {\r\n    setAudioIsPlaying(true);\r\n  });\r\n\r\n  const runWorkout = () => {\r\n    if (workoutState === WorkoutState.INITIAL) {\r\n      audioBeforeStart.play();\r\n      props.workoutTimerControl.initializePlayAudio();\r\n    } else {\r\n      setWorkoutState(WorkoutState.RUNNING);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.workoutTimerControl.done) {\r\n      setWorkoutState(WorkoutState.DONE);\r\n    }\r\n  }, [props.workoutTimerControl.done]);\r\n\r\n  useEffect(() => {\r\n    switch (workoutState) {\r\n      case WorkoutState.INITIAL:\r\n        props.workoutTimerControl.resetWorkout();\r\n        break;\r\n      case WorkoutState.RUNNING:\r\n        props.workoutTimerControl.setCountDown(true);\r\n        break;\r\n      case WorkoutState.PAUSED:\r\n        props.workoutTimerControl.setCountDown(false);\r\n        break;\r\n      case WorkoutState.STOPPED:\r\n        props.workoutTimerControl.setCountDown(false);\r\n        break;\r\n      default:\r\n      // code block\r\n    }\r\n  }, [workoutState, props.workoutTimerControl]);\r\n\r\n  return (\r\n    <>\r\n      {workoutState === WorkoutState.DONE && (\r\n        <Confetti width={width} height={height} run={workoutState === WorkoutState.DONE} />\r\n      )}\r\n      <WorkoutStartDisplay start={audioIsPlaying} />\r\n      <WorkoutFinishedDisplay\r\n        show={workoutState === WorkoutState.DONE || workoutState === WorkoutState.STOPPED}\r\n        completedSuccessfull={workoutState === WorkoutState.DONE}\r\n        reset={() => setWorkoutState(WorkoutState.INITIAL)}\r\n        quit={() => setWorkoutState(WorkoutState.PAUSED)}\r\n      />\r\n      <Card id=\"card-fg\">\r\n        <Card.Body>\r\n          <Card.Title id=\"card-title-fg\">Workout</Card.Title>\r\n          <Card.Text className=\"mt-3 ml-3 mr-3\">\r\n            {initialWorkoutTimerState.intervalTime} sec PUSH -&nbsp;\r\n            {Math.max(0, initialWorkoutTimerState.breakTime)} sec REST -&nbsp;\r\n            {initialWorkoutTimerState.rounds} times\r\n          </Card.Text>\r\n          <Card.Text className=\"mt-3 ml-3 mr-3\">\r\n            {initialWorkoutTimerState.rounds - currentWorkoutTimerState.rounds}/{initialWorkoutTimerState.rounds} Rounds\r\n          </Card.Text>\r\n          <Row xs=\"1\" className=\"mt-3 ml-3 mr-3\">\r\n            <ProgressBar\r\n              bsPrefix=\"fg-progress\"\r\n              animated\r\n              now={currentWorkoutTimerState.intervalTime}\r\n              label={`${currentWorkoutTimerState.intervalTime}sec`}\r\n              max={initialWorkoutTimerState.intervalTime}\r\n            />\r\n          </Row>\r\n          {currentWorkoutTimerState.breakTime >= 0 && currentWorkoutTimerState.rounds > 1 && (\r\n            <Row xs=\"1\" className=\"mt-3 ml-3 mr-3\">\r\n              <ProgressBar\r\n                bsPrefix=\"fgl-progress\"\r\n                animated\r\n                now={currentWorkoutTimerState.breakTime}\r\n                label={`${currentWorkoutTimerState.breakTime}sec`}\r\n                max={initialWorkoutTimerState.breakTime}\r\n              />\r\n            </Row>\r\n          )}\r\n          <Row className=\"mt-3 justify-content-center\">\r\n            <ButtonToolbar aria-label=\"Toolbar with button groups\">\r\n              <Button\r\n                id=\"button-fg\"\r\n                className=\"mr-2\"\r\n                size=\"lg\"\r\n                active\r\n                onClick={runWorkout}\r\n                disabled={\r\n                  workoutState === WorkoutState.RUNNING ||\r\n                  audioIsPlaying ||\r\n                  initialWorkoutTimerState.intervalTime === 0 ||\r\n                  initialWorkoutTimerState.rounds === 0\r\n                }\r\n              >\r\n                {workoutState === WorkoutState.INITIAL && !audioIsPlaying ? 'Start' : 'Continue'}\r\n              </Button>\r\n              <Button\r\n                variant=\"secondary\"\r\n                className=\"mr-2\"\r\n                active\r\n                onClick={() => setWorkoutState(WorkoutState.PAUSED)}\r\n                disabled={workoutState !== WorkoutState.RUNNING}\r\n              >\r\n                Break\r\n              </Button>\r\n              <Button\r\n                id=\"button-fg\"\r\n                className=\"mr-2\"\r\n                size=\"lg\"\r\n                active\r\n                onClick={() => setWorkoutState(WorkoutState.STOPPED)}\r\n                disabled={workoutState !== WorkoutState.RUNNING && workoutState !== WorkoutState.PAUSED}\r\n              >\r\n                Stop\r\n              </Button>\r\n            </ButtonToolbar>\r\n          </Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WorkoutTimer;\r\n","import React, { useState, useContext } from 'react';\r\nimport { Card, InputGroup, Col, Form, Row, Button } from 'react-bootstrap';\r\nimport { WorkoutTimerContext } from '../context/WorkoutTimerContext';\r\nimport WorkoutTimerState from '../props/WorkoutTimerState';\r\n\r\ninterface WorkoutConfigurationProps {\r\n  setCountDown: Function;\r\n}\r\n\r\nconst WorkoutConfiguration: React.FC<WorkoutConfigurationProps> = props => {\r\n  const {\r\n    initialWorkoutTimerState,\r\n    setInitialWorkoutTimerState,\r\n    setCurrentWorkoutTimerState,\r\n    configured,\r\n    setConfigured,\r\n  } = useContext(WorkoutTimerContext);\r\n  const [intervalTime, setIntervalTime] = useState(initialWorkoutTimerState.intervalTime);\r\n  const [breakTime, setBreakTime] = useState(initialWorkoutTimerState.breakTime);\r\n  const [rounds, setRounds] = useState(initialWorkoutTimerState.rounds);\r\n  const [validRounds, setValidRounds] = useState(true);\r\n  const [validIntervalTime, setValidIntervalTime] = useState(true);\r\n\r\n  return (\r\n    <Card id=\"card-fg\">\r\n      <Card.Body>\r\n        <Card.Title id=\"card-title-fg\">Configuration</Card.Title>\r\n        <InputGroup as={Col} className=\"mb-3\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Interval Time</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control\r\n            bsPrefix=\"form-control form-fg\"\r\n            type=\"text\"\r\n            pattern=\"[0-9]*\"\r\n            placeholder=\"interval time in sec\"\r\n            isInvalid={!validIntervalTime}\r\n            value={intervalTime < 0 ? \"\" : intervalTime}\r\n            onChange={(event: { currentTarget: { value: string}; }) => {\r\n              if (isNaN(parseInt(event.currentTarget.value)) || event.currentTarget.value.length === 0) {\r\n                setIntervalTime(-1);\r\n              } else {\r\n                setIntervalTime(parseInt(event.currentTarget.value));\r\n              }\r\n            }}\r\n            disabled={configured}\r\n          />\r\n          <InputGroup.Append>\r\n            <InputGroup.Text id=\"prepend-radius\">sec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</InputGroup.Text>\r\n          </InputGroup.Append>\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Please set a numerical Interval Time e.g. <strong>20</strong>.\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n\r\n        <InputGroup as={Col} className=\"mb-3\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>&nbsp;&nbsp;&nbsp;Break Time</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control\r\n            bsPrefix=\"form-control form-fg\"\r\n            type=\"text\"\r\n            pattern=\"[0-9]*\"\r\n            placeholder=\"break time in sec\"\r\n            value={breakTime < 0 ? \"\" : breakTime}\r\n            onChange={(event: { currentTarget: { value: string}; }) => {\r\n              if (isNaN(parseInt(event.currentTarget.value)) || event.currentTarget.value.length === 0) {\r\n                setBreakTime(-1);\r\n              } else {\r\n                setBreakTime(parseInt(event.currentTarget.value));\r\n              }\r\n            }}\r\n            disabled={configured}\r\n          />\r\n          <InputGroup.Append>\r\n            <InputGroup.Text>sec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</InputGroup.Text>\r\n          </InputGroup.Append>\r\n        </InputGroup>\r\n\r\n        <InputGroup as={Col} className=\"mb-3\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Rounds</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control\r\n            bsPrefix=\"form-control form-fg\"\r\n            type=\"text\"\r\n            pattern=\"[0-9]*\"\r\n            placeholder=\"# rounds\"\r\n            isInvalid={!validRounds}\r\n            value={rounds < 0 ? \"\" : rounds}\r\n            onChange={(event: { currentTarget: { value: string}; }) => {\r\n              if (isNaN(parseInt(event.currentTarget.value)) || event.currentTarget.value.length === 0) {\r\n                setRounds(-1);\r\n              } else {\r\n                setRounds(parseInt(event.currentTarget.value));\r\n              }\r\n            }}\r\n            disabled={configured}\r\n          />\r\n          <InputGroup.Append>\r\n            <InputGroup.Text id=\"prepend-radius\">Rounds</InputGroup.Text>\r\n          </InputGroup.Append>\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Please set a numerical # Rounds e.g. <strong>1</strong>.\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n        <Row className=\"justify-content-center\">\r\n          <Button\r\n            id=\"button-fg\"\r\n            className=\"mr-2\"\r\n            onClick={() => {\r\n              if (intervalTime > 0 && rounds > 0) {\r\n                setValidRounds(true);\r\n                setValidIntervalTime(true);\r\n                setConfigured(true);\r\n                const newInitialWorkoutTimerState: WorkoutTimerState = {\r\n                  intervalTime: intervalTime,\r\n                  breakTime: breakTime === 0 ? -1 : breakTime,\r\n                  rounds: rounds,\r\n                };\r\n                setInitialWorkoutTimerState(newInitialWorkoutTimerState);\r\n                setCurrentWorkoutTimerState(newInitialWorkoutTimerState);\r\n              } else if (intervalTime > 0) {\r\n                setValidIntervalTime(true);\r\n                setValidRounds(false);\r\n              } else if (rounds > 0) {\r\n                setValidRounds(true);\r\n                setValidIntervalTime(false);\r\n              } else {\r\n                setValidRounds(false);\r\n                setValidIntervalTime(false);\r\n              }\r\n            }}\r\n            disabled={configured}\r\n          >\r\n            Submit\r\n          </Button>\r\n          <Button\r\n            id=\"button-fg\"\r\n            className=\"ml-2\"\r\n            onClick={() => {\r\n              setConfigured(false);\r\n              props.setCountDown(false);\r\n            }}\r\n            disabled={!configured}\r\n          >\r\n            Configure\r\n          </Button>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default WorkoutConfiguration;\r\n","import React from 'react';\r\nimport { Button, Modal, OverlayTrigger, Tooltip } from 'react-bootstrap';\r\n\r\ninterface WorkoutFinishedProps {\r\n  show: boolean;\r\n  completedSuccessfull: boolean;\r\n  reset: Function;\r\n  quit: Function;\r\n}\r\n\r\nconst WorkoutFinishedDisplay: React.FC<WorkoutFinishedProps> = props => {\r\n  return (\r\n    <Modal show={props.show} size=\"lg\" centered>\r\n      <Modal.Header className=\"modal-head-fg\">\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          {props.completedSuccessfull ? 'WUHUUUUU!' : 'Stop Workout?'}\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body className=\"modal-rest-fg\">\r\n        <h5>\r\n          {props.completedSuccessfull\r\n            ? 'You completed your Workout! Congrats!'\r\n            : 'Do you really want to stop your Workout?'}\r\n        </h5>\r\n      </Modal.Body>\r\n      <Modal.Footer className=\"modal-rest-fg\">\r\n        <Button hidden={props.completedSuccessfull} id=\"button-fg\" onClick={() => props.quit()}>\r\n          Continue Workout\r\n        </Button>\r\n        <OverlayTrigger\r\n          trigger=\"click\"\r\n          placement=\"top\"\r\n          overlay={<Tooltip id=\"resetTooltip\">Reseting the Workout</Tooltip>}\r\n        >\r\n          <Button\r\n            id=\"button-fg\"\r\n            onClick={() => new Promise(resolve => setTimeout(resolve, 500)).then(resolve => props.reset())}\r\n          >\r\n            {props.completedSuccessfull ? 'Close' : 'Stop Workout'}\r\n          </Button>\r\n        </OverlayTrigger>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default WorkoutFinishedDisplay;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Modal } from 'react-bootstrap';\r\nimport num3 from '../../img/3.svg';\r\nimport num2 from '../../img/2.svg';\r\nimport num1 from '../../img/1.svg';\r\n\r\nconst WorkoutStartDisplay: React.FC<{ start: boolean }> = props => {\r\n  const [showImageModal3, setShowImageModal3] = useState(false);\r\n  const [showImageModal2, setShowImageModal2] = useState(false);\r\n  const [showImageModal1, setShowImageModal1] = useState(false);\r\n  const startTimer3 = () =>\r\n    new Promise(resolve => setTimeout(resolve, 1000)).then(resolve => {\r\n      setShowImageModal3(false);\r\n      setShowImageModal2(true);\r\n    });\r\n  const startTimer2 = () =>\r\n    new Promise(resolve => setTimeout(resolve, 1000)).then(resolve => {\r\n      setShowImageModal2(false);\r\n      setShowImageModal1(true);\r\n    });\r\n  const startTimer1 = () =>\r\n    new Promise(resolve => setTimeout(resolve, 1000)).then(resolve => {\r\n      setShowImageModal1(false);\r\n    });\r\n\r\n  useEffect(() => {\r\n    if (props.start) {\r\n      setShowImageModal3(true);\r\n    }\r\n  }, [props.start]);\r\n\r\n  if (showImageModal3) {\r\n    return (\r\n      <Modal\r\n        className=\"fade_in_number_modal\"\r\n        show={showImageModal3}\r\n        size=\"sm\"\r\n        centered\r\n        onShow={startTimer3}\r\n        scrollable={false}\r\n      >\r\n        <img alt=\"\" src={num3} width=\"80%\" height=\"80%\" />\r\n      </Modal>\r\n    );\r\n  } else if (showImageModal2) {\r\n    return (\r\n      <Modal\r\n        className=\"fade_in_number_modal\"\r\n        show={showImageModal2}\r\n        size=\"sm\"\r\n        centered\r\n        onShow={startTimer2}\r\n        scrollable={false}\r\n      >\r\n        <img alt=\"\" src={num2} width=\"80%\" height=\"80%\" />\r\n      </Modal>\r\n    );\r\n  } else if (showImageModal1) {\r\n    return (\r\n      <Modal\r\n        className=\"fade_in_number_modal\"\r\n        show={showImageModal1}\r\n        size=\"sm\"\r\n        centered\r\n        onShow={startTimer1}\r\n        scrollable={false}\r\n      >\r\n        <img alt=\"\" src={num1} width=\"80%\" height=\"80%\" />\r\n      </Modal>\r\n    );\r\n  } else {\r\n    return <></>;\r\n  }\r\n};\r\n\r\nexport default WorkoutStartDisplay;\r\n","import React, { useContext } from 'react';\r\nimport { Container, Row } from 'react-bootstrap';\r\nimport useWorkoutTimerControl from '../control/WorkoutTimerControl';\r\nimport WorkoutConfiguration from '../display/WorkoutConfigurationDisplay';\r\nimport WorkoutTimer from '../display/WorkoutTimerDisplay';\r\nimport { WorkoutTimerContext } from '../context/WorkoutTimerContext';\r\n\r\nconst WorkoutTimerPage: React.FC = () => {\r\n  const workoutTimerControl = useWorkoutTimerControl();\r\n  const { configured } = useContext(WorkoutTimerContext);\r\n\r\n  return (\r\n    <Container>\r\n      <Row className=\"mt-3 justify-content-center\">\r\n        <WorkoutConfiguration setCountDown={workoutTimerControl.setCountDown} />\r\n      </Row>\r\n      {configured && (\r\n        <Row className=\"mt-3 justify-content-center\">\r\n          <WorkoutTimer workoutTimerControl={workoutTimerControl} />\r\n        </Row>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default WorkoutTimerPage;\r\n","import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport WorkoutTimerPage from './workout_timer/page/WorkoutTimerPage';\r\nimport logo from './img/favicon.svg';\r\nimport './WorkoutApp.css';\r\nimport { WorkoutTimerContextProvider } from './workout_timer/context/WorkoutTimerContext';\r\n\r\nconst WorkoutApp = () => {\r\n  const styles = {\r\n    padTopAfterFixedNavbar: {\r\n      paddingTop: '50px',\r\n    } as React.CSSProperties,\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <header>\r\n        <Navbar bg=\"fg\" variant=\"dark\" fixed=\"top\">\r\n          <Navbar.Brand href=\"#home\">\r\n            <img alt=\"\" src={logo} width=\"30\" height=\"30\" className=\"spin-logo d-inline-block align-top\" />\r\n            &nbsp;&nbsp;WorkoutApp\r\n          </Navbar.Brand>\r\n        </Navbar>\r\n      </header>\r\n      <main style={styles.padTopAfterFixedNavbar}>\r\n        {/*<main style={{paddingTop: \"50px\"}}> */} {/*this works too - Inline-Style*/}\r\n        <WorkoutTimerContextProvider>\r\n          <WorkoutTimerPage />\r\n        </WorkoutTimerContextProvider>\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WorkoutApp;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport WorkoutApp from './WorkoutApp';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nconst mount = document.getElementById('root');\r\n\r\nconst app = (\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <WorkoutApp />\r\n    </BrowserRouter>\r\n  </React.StrictMode>\r\n);\r\n\r\nReactDOM.render(app, mount);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/3.119c6f28.svg\";","module.exports = __webpack_public_path__ + \"static/media/2.e8953c22.svg\";","module.exports = __webpack_public_path__ + \"static/media/1.a3c5ea73.svg\";","module.exports = __webpack_public_path__ + \"static/media/favicon.8b677943.svg\";","module.exports = __webpack_public_path__ + \"static/media/beforeBreak.49a3fd61.mp3\";","module.exports = __webpack_public_path__ + \"static/media/beforeInterval.f739559a.wav\";","module.exports = __webpack_public_path__ + \"static/media/beforeStart321.28fa21c0.wav\";"],"sourceRoot":""}